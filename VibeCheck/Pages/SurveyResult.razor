@page "/{code}/results"
@using VibeCheck.Model.ViewModels
@using VibeCheck.Components
@inject HttpClient Http

<div class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div class="max-w-2xl w-full p-6 bg-white rounded-2xl shadow-lg">
        <h1 class="text-3xl font-bold text-center mb-4 text-red-500">@surveyQuestion</h1>

        <div class="space-y-6">
            @if (responses.Count() < 2)
            {
                <p class="text-center text-xl">Not enough responses yet.</p>
            }
            else
            {
                <ResultsVisualization Responses="responses"/>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; }

    private string surveyQuestion;
    private List<Model.ViewModels.SurveyResponse> responses = new();

    protected override async Task OnInitializedAsync()
    {
        var surveyResponse = await Http.GetAsync($"http://localhost:5183/survey/{Code}");
        if (surveyResponse.IsSuccessStatusCode)
        {
            var survey = await surveyResponse.Content.ReadFromJsonAsync<Survey>();
            surveyQuestion = survey!.Question;
        }
        else
        {
            surveyQuestion = "Survey not found.";
        }

        var responsesResponse = await Http.GetAsync($"http://localhost:5183/survey/{Code}/responses");
        if (responsesResponse.IsSuccessStatusCode)
        {
            responses = await responsesResponse.Content.ReadFromJsonAsync<List<Model.ViewModels.SurveyResponse>>();
        }
        else
        {
            responses = new List<Model.ViewModels.SurveyResponse>();
        }
    }
}