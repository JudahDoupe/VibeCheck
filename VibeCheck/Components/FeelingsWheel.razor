@using VibeCheck.Model.Utilities
@using Microsoft.Extensions.Configuration
@using VibeCheck.Model.ViewModels
@inject IConfiguration Configuration
@inject HttpClient Http

<div class="feelings-wheel">
    @foreach (var tile in _tiles)
    {
        <EmotionTile Feeling="tile.Key" Tile="tile.Value" OnClick="() => OnFeelingSelected(tile.Key.Name)" />
    }
</div>

@code {
    [Parameter]
    public EventCallback<string> onFeelingSelected { get; set; }

    private Dictionary<(string, int), Feeling> _allFeelings = new();

    static double radius1 = 25;
    static double radius2 = 100;
    static double radius3 = 200;
    static double radius4 = 300;

    private Dictionary<Feeling, EmotionTile.FeelingTileModel> _tiles = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<List<Feeling>>($"http://localhost:5183/survey/feelings");
        if (response != null)
        {
            _allFeelings = response.ToDictionary(x => (x.Name, x.order));
            _tiles = SizeTiles();
        }
    }

    private async Task OnFeelingSelected(string feeling)
    {
        if (onFeelingSelected.HasDelegate)
        {
            await onFeelingSelected.InvokeAsync(feeling);
        }
    }
    
    private Dictionary<Feeling, EmotionTile.FeelingTileModel> SizeTiles()
    {
        var result = new Dictionary<Feeling, EmotionTile.FeelingTileModel>();
        
        var totalFeelingCount = _allFeelings.Count;
        var feelingCounts = new Dictionary<Feeling, int>();
        foreach (var feeling in _allFeelings.Values)
        {
            feelingCounts[feeling] = 0;
        }

        
        foreach (var feeling in _allFeelings.Values)
        {
            var currentFeeling = feeling;
            do
            {
                feelingCounts[currentFeeling]++;
                currentFeeling = currentFeeling.Parent == null ? null : _allFeelings[(currentFeeling.Parent, currentFeeling.order -1)];
            } while (currentFeeling is not null);
        }
        
        var feelingStartingAngle = new Dictionary<string, double>();
        var feelingMaxSize = new Dictionary<string, double>();
        var innerRadius = 25;
        var outerRadius = 100;
        for (var i = 0; i < 3; i++)
        {

            var orderFeelings = feelingCounts.Where(x => x.Key.order == i).Select(x => x.Key);
            foreach (var group in orderFeelings.GroupBy(x => x.Parent))
            {
                var parentFeeling = group.First().Parent;
                var startAngle = parentFeeling == null ? 0 :feelingStartingAngle[parentFeeling];
                var maxSize = parentFeeling == null ? 1 :feelingMaxSize[parentFeeling];
                var parentCount = parentFeeling == null ? totalFeelingCount : feelingCounts[_allFeelings[(parentFeeling, i-1)]];
                foreach (var feeling in group)
                {
                    var size = ((double)feelingCounts[feeling] / parentCount) * maxSize;
                    feelingStartingAngle[feeling.Name] = startAngle;
                    feelingMaxSize[feeling.Name] = size;
                    result[feeling] = new EmotionTile.FeelingTileModel(
                        Angle.FromRatio(startAngle), 
                        Angle.FromRatio(startAngle+size), 
                        innerRadius, 
                        outerRadius);
                    startAngle+=size;
                }
            }

            innerRadius = outerRadius;
            outerRadius += 100;
        }

        return result;
    }
}