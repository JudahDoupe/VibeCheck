@using VibeCheck.Model
@using VibeCheck.Model.Utilities
@using VibeCheck.Model.ViewModels
@inject HttpClient Http

<div class="feeling " style="pointer-events: none; transform-origin: @(TileCenter.Y)px @(TileCenter.X)px;">
    <svg style="width: @(size)px; height: @(size)px; ">
        <path style="fill: @Feeling.color; 
                     stroke:white; 
                     stroke-width:@strokeWidth; 
                     stroke-linecap:round;
                     pointer-events: visiblePainted;" 
              d="@GeneratePath()">
        </path>
        <text Fill="white" 
              font-size="15"
              text-anchor="middle"
              transform="translate(@SvgCenter.ToSvg()) 
                        rotate(@TextRotation.Degree) 
                        translate(@_midRadius ,@(_flip ? -5 : 5)) 
                        rotate(@(_flip ? 180 : 0))">
            @Feeling.Name
        </text>
    </svg>
</div>

@code {
    
    public record FeelingTileModel(Angle Start, Angle End, double InnerRadius, double OuterRadius)
    {
        public double Length => OuterRadius - InnerRadius;
    }
    
    [Parameter] public Feeling Feeling { get; set; } = new("",  null, 0, "");
    [Parameter] public FeelingTileModel Tile { get; set; } = new(Angle.FromDregrees(0), Angle.FromDregrees(0), 0,0);

    public Angle TextRotation { get; private set; }
    public Point2D SvgCenter { get; private set; }
    public Point2D TileCenter => SvgCenter.Add(TextRotation.Project(_midRadius));

    private bool _flip => TextRotation.Degree is > 90 and < 270;
    private double strokeWidth = 5;
    private double size => Tile.OuterRadius * 2 + strokeWidth;
    private double _midRadius => (Tile.InnerRadius + Tile.OuterRadius) / 2.0;
    
    protected override void OnInitialized()
    { 
        SvgCenter = new Point2D(Tile.OuterRadius, Tile.OuterRadius);
        TextRotation = Angle.FromRatio(((Tile.Start.Ratio + Tile.End.Ratio) / 2.0) - 0.25).Inverse();
    }
    
    public string GeneratePath()
    {
        var start = Tile.Start;
        var end = Tile.End;
        var innerRadius = Tile.InnerRadius;
        var outerRadius = Tile.OuterRadius;
        var innerStart = start.Project(innerRadius).Add(outerRadius, outerRadius).ToSvg();
        var outerStart = start.Project(outerRadius).Add(outerRadius, outerRadius).ToSvg();
        var innerEnd =end.Project(innerRadius).Add(outerRadius,outerRadius).ToSvg();
        var outerEnd =end.Project(outerRadius).Add(outerRadius,outerRadius).ToSvg();
        var innerSvgRadius = $"{innerRadius},{innerRadius}";
        var outerSvgRadius = $"{outerRadius},{outerRadius}";

        var path = $"M{innerStart} ";
        path += $"L{outerStart} ";
        path += $"A{outerSvgRadius} 1 0 0 {outerEnd} ";
        path += $"L{innerEnd} ";
        path += $"A{innerSvgRadius} 1 0 1 {innerStart} ";
        path += "z";
        
        return path;
    }
}