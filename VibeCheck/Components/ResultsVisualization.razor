@using VibeCheck.Model.Utilities
@using VibeCheck.Model.ViewModels
@inject HttpClient Http

<div class="feelings-wheel">
    @foreach (var tile in _tiles)
    {
        <ResultTile Feeling="tile.Key" Tile="tile.Value" />
    }
</div>

@code {
    [Parameter]
    public List<SurveyResponse> Responses { get; set; }

    private Dictionary<Feeling, ResultTile.FeelingTileModel> _tiles = new();
    private List<Feeling> _allFeelings = new();


    protected override async Task OnInitializedAsync()
    {
        _tiles = SizeTiles();
    }

    private Dictionary<Feeling, ResultTile.FeelingTileModel> SizeTiles()
    {
        var result = new Dictionary<Feeling, ResultTile.FeelingTileModel>();
        
        var totalFeelingCount = Responses.Count;
        var feelingCounts = new Dictionary<Feeling, int>();

        foreach (var response in Responses)
        {
            var currentFeeling = response.Feeling;
            do
            {
                feelingCounts.TryAdd(currentFeeling, 0);
                feelingCounts[currentFeeling]++;
                currentFeeling = currentFeeling.Parent;
            } while (currentFeeling is not null);
        }
        
        var feelingStartingAngle = new Dictionary<Feeling, double>();
        var feelingMaxSize = new Dictionary<Feeling, double>();
        var innerRadius = 25;
        var outerRadius = 100;
        for (var depth = 0; depth < 3; depth++)
        {
            var similarDepthFeelings = feelingCounts.Select(x => x.Key).Where(x => x.Depth == depth);
            foreach (var siblingFeelings in similarDepthFeelings.GroupBy(x => x.Parent))
            {
                var parentFeeling = siblingFeelings.First().Parent;
                var startAngle = parentFeeling == null ? 0 :feelingStartingAngle[parentFeeling];
                var maxSize = parentFeeling == null ? 1 :feelingMaxSize[parentFeeling];
                var parentCount = parentFeeling == null ? totalFeelingCount : feelingCounts[parentFeeling];
                foreach (var feeling in siblingFeelings)
                {
                    var size = ((double)feelingCounts[feeling] / parentCount) * maxSize;
                    feelingStartingAngle[feeling] = startAngle;
                    feelingMaxSize[feeling] = size;
                    result[feeling] = new ResultTile.FeelingTileModel(
                        Angle.FromRatio(startAngle), 
                        Angle.FromRatio(startAngle+size), 
                        innerRadius, 
                        outerRadius);
                    startAngle+=size;
                }
            }

            innerRadius = outerRadius;
            outerRadius += 100;
        }

        return result;
    }
}