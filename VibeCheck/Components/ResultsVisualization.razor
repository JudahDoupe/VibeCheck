@using VibeCheck.Model.Utilities
@using VibeCheck.Model.ViewModels
@inject HttpClient Http

<div class="feelings-wheel">
    @foreach (var tile in _tiles)
    {
        <ResultTile Feeling="tile.Key" Tile="tile.Value" />
    }
</div>

@code {
    [Parameter]
    public List<SurveyResponse> Responses { get; set; }

    private Dictionary<string, Feeling> _allFeelings = new();
    private Dictionary<Feeling, ResultTile.FeelingTileModel> _tiles = new();


    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<List<Feeling>>($"http://localhost:5183/survey/feelings");
        if (response != null)
        {
            _allFeelings = response.ToDictionary(x => x.Name);
        }
        
        _tiles = SizeTiles(Responses.Select(x => _allFeelings[x.Feeling]).ToList());
    }

    private Dictionary<Feeling, ResultTile.FeelingTileModel> SizeTiles(List<Feeling> feelings)
    {
        var result = new Dictionary<Feeling, ResultTile.FeelingTileModel>();
        
        var totalFeelingCount = feelings.Count;
        var feelingCounts = new Dictionary<Feeling, int>();
        foreach (var feeling in _allFeelings.Values)
        {
            feelingCounts[feeling] = 0;
        }

        
        var feelingContribution = new Dictionary<Feeling, List<Feeling>>();
        foreach (var feeling in feelings)
        {
            var contributions = new List<Feeling>() { feeling };
            var currentFeeling = feeling;
            while (currentFeeling.Parent != null)
            {
                currentFeeling = _allFeelings[currentFeeling.Parent];
                contributions.Add(currentFeeling);
            }
            feelingContribution[feeling] = contributions;
        }
        
        
        foreach (Feeling contributingFeeling in feelings.SelectMany(feeling => feelingContribution[feeling]))
        {
            feelingCounts[contributingFeeling]++;
        }

        var feelingStartingAngle = new Dictionary<string?, double>() { {null, 0}};
        var innerRadius = 25;
        var outerRadius = 100;
        var maxOrder = feelings.Select(feeling => feeling.order).Max();
        for (var i = 0; i < maxOrder; i++)
        {

            var orderFeelings = feelingCounts.Where(x => x.Key.order == i).Select(x => x.Key);
            foreach (var group in orderFeelings.GroupBy(x => x.Parent))
            {
                var parentFeeling = group.First().Parent;
                var startAngle = feelingStartingAngle[group.First().Parent];
                var parentCount = parentFeeling == null ? totalFeelingCount : feelingCounts[_allFeelings[parentFeeling]];
                foreach (var feeling in group)
                {
                    var size = (double)feelingCounts[feeling] / parentCount;
                    feelingStartingAngle[feeling.Name] = startAngle;
                    result[feeling] = new ResultTile.FeelingTileModel(
                        Angle.FromRatio(startAngle), 
                        Angle.FromRatio(startAngle+size), 
                        innerRadius, 
                        outerRadius);
                    startAngle+=size;
                }
            }

            innerRadius = outerRadius;
            outerRadius += 100;
        }

        return result;
    }
}